apply plugin: 'com.android.application'

def gitVersionCode() {
    def cmd = 'git rev-list HEAD --count'
    cmd.execute().text.trim().toInteger()
}

def gitBranchName() {
    def cmd = 'git rev-parse --abbrev-ref HEAD'
    return cmd.execute().text.trim()
}

def gitVersionTag() {
    def cmd = 'git describe --tags'
    def version = cmd.execute().text.trim()
    def pattern = "-(\\d+)-g"
    def matcher = version =~ pattern
    if (matcher) {
        version = version.substring(0, matcher.start()) + "." + matcher[0][1]
    } else {
        version = version + ".0"
    }

    return version
}


def gitVersionTagDebug() {
    def cmd = 'git describe --tags'
    return cmd.execute().text.trim()
}

def releaseTime() {
    return new Date().format("yyMMdd", TimeZone.getTimeZone("Asia/Shanghai"))
}

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "com.xidian.focustime"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode gitVersionCode()
        versionName gitVersionTag()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {

        debug {
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            applicationIdSuffix ".debug"//包名加上debug
            versionNameSuffix "-${gitBranchName()}-debug"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
        }

        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            zipAlignEnabled true //Zipalign优化
            shrinkResources false //移除无用的resource文件
            minifyEnabled false //混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType.name == "release") {
                outputFileName = "FocusTime_v${gitVersionTag()}_${gitVersionCode()}_${releaseTime()}.apk"
            } else {
                outputFileName = "FocusTime_${gitBranchName()}_v${gitVersionTagDebug()}_${gitVersionCode()}_${releaseTime()}_debug.apk"
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:design:26.+'
    compile 'org.litepal.android:core:1.6.0'
    compile 'com.apkfuns.logutils:library:1.5.1.1'
    testCompile 'junit:junit:4.12'

    compile('cn.qqtheme.framework:WheelPicker:1.5.5') {
        exclude group: 'com.android.support'
    }
    compile 'com.umeng.analytics:analytics:6.1.2'

    compile 'com.zhy:autolayout:1.4.5'
    compile 'com.lqr.optionitemview:library:1.0.7'

    implementation 'com.jakewharton:butterknife:8.7.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'
    compile 'com.jaeger.statusbaruitl:library:1.3.5'
    compile 'me.drakeet.materialdialog:library:1.3.1'
    compile 'com.github.bumptech.glide:glide:3.7.0'

    compile 'com.lqr.adapter:library:1.0.2'
    compile 'com.lqr.recyclerview:library:1.0.2'
    compile 'com.lqr.imagepicker:library:1.0.0'
    compile 'com.lqr.ninegridimageview:library:1.0.0'
    compile 'com.lqr.optionitemview:library:1.0.7'
    compile 'com.lqr.emoji:library:1.0.2'
    compile 'com.lqr.audio:library:1.0.0'
    compile 'com.lqr.imagepicker:library:1.0.0'
}
